{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Loan Prediction - Data Mining Assignment 4"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### -- Caixin Yang"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.impute import SimpleImputer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/apple/opt/anaconda3/lib/python3.7/site-packages/IPython/core/interactiveshell.py:3063: DtypeWarning: Columns (15) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  interactivity=interactivity, compiler=compiler, result=result)\n"
     ]
    }
   ],
   "source": [
    "modeling = pd.read_csv('Modeling Data.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "testing = pd.read_csv('Testing.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>X7</th>\n",
       "      <th>X8</th>\n",
       "      <th>X9</th>\n",
       "      <th>X10</th>\n",
       "      <th>...</th>\n",
       "      <th>X23</th>\n",
       "      <th>X24</th>\n",
       "      <th>X25</th>\n",
       "      <th>X26</th>\n",
       "      <th>X27</th>\n",
       "      <th>X28</th>\n",
       "      <th>X29</th>\n",
       "      <th>X30</th>\n",
       "      <th>X31</th>\n",
       "      <th>X32</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>11.89%</td>\n",
       "      <td>54734.0</td>\n",
       "      <td>80364.0</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$19,080</td>\n",
       "      <td>36 months</td>\n",
       "      <td>B</td>\n",
       "      <td>B4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>Feb-94</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>28854.0</td>\n",
       "      <td>52.10%</td>\n",
       "      <td>42.0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.71%</td>\n",
       "      <td>55742.0</td>\n",
       "      <td>114426.0</td>\n",
       "      <td>$7,000</td>\n",
       "      <td>$7,000</td>\n",
       "      <td>$673</td>\n",
       "      <td>36 months</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>CNN</td>\n",
       "      <td>...</td>\n",
       "      <td>Oct-00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>33623.0</td>\n",
       "      <td>76.70%</td>\n",
       "      <td>7.0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.99%</td>\n",
       "      <td>57167.0</td>\n",
       "      <td>137225.0</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$24,725</td>\n",
       "      <td>36 months</td>\n",
       "      <td>D</td>\n",
       "      <td>D3</td>\n",
       "      <td>Web Programmer</td>\n",
       "      <td>...</td>\n",
       "      <td>Jun-00</td>\n",
       "      <td>0.0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>19878.0</td>\n",
       "      <td>66.30%</td>\n",
       "      <td>17.0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.11%</td>\n",
       "      <td>57245.0</td>\n",
       "      <td>138150.0</td>\n",
       "      <td>$1,200</td>\n",
       "      <td>$1,200</td>\n",
       "      <td>$1,200</td>\n",
       "      <td>36 months</td>\n",
       "      <td>C</td>\n",
       "      <td>C2</td>\n",
       "      <td>city of beaumont texas</td>\n",
       "      <td>...</td>\n",
       "      <td>Jan-85</td>\n",
       "      <td>0.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>5.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2584.0</td>\n",
       "      <td>40.40%</td>\n",
       "      <td>31.0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.57%</td>\n",
       "      <td>57416.0</td>\n",
       "      <td>139635.0</td>\n",
       "      <td>$10,800</td>\n",
       "      <td>$10,800</td>\n",
       "      <td>$10,692</td>\n",
       "      <td>36 months</td>\n",
       "      <td>C</td>\n",
       "      <td>C3</td>\n",
       "      <td>State Farm Insurance</td>\n",
       "      <td>...</td>\n",
       "      <td>Dec-96</td>\n",
       "      <td>1.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>3511.0</td>\n",
       "      <td>25.60%</td>\n",
       "      <td>40.0</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 32 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       X1       X2        X3       X4       X5       X6          X7 X8  X9  \\\n",
       "0  11.89%  54734.0   80364.0  $25,000  $25,000  $19,080   36 months  B  B4   \n",
       "1  10.71%  55742.0  114426.0   $7,000   $7,000     $673   36 months  B  B5   \n",
       "2  16.99%  57167.0  137225.0  $25,000  $25,000  $24,725   36 months  D  D3   \n",
       "3  13.11%  57245.0  138150.0   $1,200   $1,200   $1,200   36 months  C  C2   \n",
       "4  13.57%  57416.0  139635.0  $10,800  $10,800  $10,692   36 months  C  C3   \n",
       "\n",
       "                      X10  ...     X23  X24   X25 X26   X27  X28      X29  \\\n",
       "0                     NaN  ...  Feb-94  0.0   NaN NaN  10.0  0.0  28854.0   \n",
       "1                     CNN  ...  Oct-00  0.0   NaN NaN   7.0  0.0  33623.0   \n",
       "2          Web Programmer  ...  Jun-00  0.0  41.0 NaN  10.0  0.0  19878.0   \n",
       "3  city of beaumont texas  ...  Jan-85  0.0  64.0 NaN   5.0  0.0   2584.0   \n",
       "4    State Farm Insurance  ...  Dec-96  1.0  58.0 NaN  14.0  0.0   3511.0   \n",
       "\n",
       "      X30   X31 X32  \n",
       "0  52.10%  42.0   f  \n",
       "1  76.70%   7.0   f  \n",
       "2  66.30%  17.0   f  \n",
       "3  40.40%  31.0   f  \n",
       "4  25.60%  40.0   f  \n",
       "\n",
       "[5 rows x 32 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeling.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X1      61010\n",
       "X2          1\n",
       "X3          1\n",
       "X4          1\n",
       "X5          1\n",
       "X6          1\n",
       "X7          1\n",
       "X8      61270\n",
       "X9      61270\n",
       "X10     23986\n",
       "X11     17538\n",
       "X12     61361\n",
       "X13     61028\n",
       "X14         1\n",
       "X15         1\n",
       "X16    276440\n",
       "X17         1\n",
       "X18        19\n",
       "X19         1\n",
       "X20         1\n",
       "X21         1\n",
       "X22         1\n",
       "X23         1\n",
       "X24         1\n",
       "X25    218802\n",
       "X26    348845\n",
       "X27         1\n",
       "X28         1\n",
       "X29         1\n",
       "X30       267\n",
       "X31         1\n",
       "X32         1\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeling.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X1      object\n",
       "X2     float64\n",
       "X3     float64\n",
       "X4      object\n",
       "X5      object\n",
       "X6      object\n",
       "X7      object\n",
       "X8      object\n",
       "X9      object\n",
       "X10     object\n",
       "X11     object\n",
       "X12     object\n",
       "X13    float64\n",
       "X14     object\n",
       "X15     object\n",
       "X16     object\n",
       "X17     object\n",
       "X18     object\n",
       "X19     object\n",
       "X20     object\n",
       "X21    float64\n",
       "X22    float64\n",
       "X23     object\n",
       "X24    float64\n",
       "X25    float64\n",
       "X26    float64\n",
       "X27    float64\n",
       "X28    float64\n",
       "X29    float64\n",
       "X30     object\n",
       "X31    float64\n",
       "X32     object\n",
       "dtype: object"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "modeling.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Clean Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1 Handle Missing Values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Drop NaN for the target variable column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15.0% data is missing from X1 column\n",
      "\n",
      "Out of 400,000 rows, 61,010 rows do not have X1 value, which is our target variable. In this case, I am trying to delete all the missing values in X1. After I delete 15% of the data, we still have 85%, which I think is enough volumn for training data.\n"
     ]
    }
   ],
   "source": [
    "print(str(round(61010/400000,2)*100) + '% data is missing from X1 column')\n",
    "print('')\n",
    "print('Out of 400,000 rows, 61,010 rows do not have X1 value, which is our target variable. In this case, I am trying to delete all the missing values in X1. After I delete 15% of the data, we still have 85%, which I think is enough volumn for training data.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = modeling.dropna(subset=['X1'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(338990, 32)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Drop Columns that have 1 or less than 1000 rows of missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Some columns just have one missing value, and I decided to drop them.\n"
     ]
    }
   ],
   "source": [
    "df = df.dropna(subset=['X2'])\n",
    "print('Some columns just have one missing value, and I decided to drop them.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Some columns just have less than 1,000 rows of missing values, and I decided to drop them\n"
     ]
    }
   ],
   "source": [
    "df = df.dropna(subset=['X18','X30'])\n",
    "print('Some columns just have less than 1,000 rows of missing values, and I decided to drop them')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Combine the Testing Dataset to the Modeling Dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### I did this step because later on, we will convert all the categorical data to dummies, and I want to make sure the column numbers are all the same. I will combine them first, to make sure the data format are the same, and then seperate the before building the model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([df,testing],keys=['modeling','testing'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(338749, 32)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc['modeling'].shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(80000, 32)"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc['testing'].shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Some colmns have over 10K of rows of missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The rest columns that miss over 10,000 values are:\n",
      "X8: loan grade\n",
      "X9: loan subgrade\n",
      "X10: Employer or job title\n",
      "X11: number of years employed\n",
      "X12: home ownership status\n",
      "X13: annual income of borrower\n",
      "X16: reason for loan provided by borrower\n",
      "X25: number of months since the borrower last delinquency\n",
      "X26: number of months since the last public record\n"
     ]
    }
   ],
   "source": [
    "print('The rest columns that miss over 10,000 values are:')\n",
    "print('X8: loan grade')\n",
    "print('X9: loan subgrade')\n",
    "print('X10: Employer or job title')\n",
    "print('X11: number of years employed')\n",
    "print('X12: home ownership status')\n",
    "print('X13: annual income of borrower')\n",
    "print('X16: reason for loan provided by borrower')\n",
    "print('X25: number of months since the borrower last delinquency')\n",
    "print('X26: number of months since the last public record')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Teacher                                    5158\n",
       "Manager                                    4149\n",
       "Registered Nurse                           2102\n",
       "RN                                         2046\n",
       "Supervisor                                 1853\n",
       "                                           ... \n",
       "Bexar Appraisal District                      1\n",
       "Hillcrest Foodservice                         1\n",
       "st josephs hospital                           1\n",
       "senior billing representative                 1\n",
       "Assistance Manager Transportation Dept.       1\n",
       "Name: X10, Length: 184242, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['X10'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Both X10 and X16 has text content. X10 seems to be more categorical and X16 are all sentences. I decided to delete X16 as it will need further text mining and I could not directly put it into the model.\n"
     ]
    }
   ],
   "source": [
    "print('Both X10 and X16 has text content. X10 seems to be more categorical and X16 are all sentences. I decided to delete X16 as it will need further text mining and I could not directly put it into the model.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['X16'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X1      80000\n",
       "X8      51816\n",
       "X9      51816\n",
       "X10     24634\n",
       "X11     19167\n",
       "X12     51930\n",
       "X13     51715\n",
       "X25    224039\n",
       "X26    361520\n",
       "X30        30\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = df.isnull().sum()\n",
    "mask[mask>0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Drop Some ID columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I choose to drop these two columns because they are IDs that do not contain any information.\n"
     ]
    }
   ],
   "source": [
    "df = df.drop(['X2','X3'], axis=1)\n",
    "print('I choose to drop these two columns because they are IDs that do not contain any information.')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2 Handle Data Types"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>X7</th>\n",
       "      <th>X8</th>\n",
       "      <th>X9</th>\n",
       "      <th>X10</th>\n",
       "      <th>X11</th>\n",
       "      <th>X12</th>\n",
       "      <th>X14</th>\n",
       "      <th>X15</th>\n",
       "      <th>X17</th>\n",
       "      <th>X18</th>\n",
       "      <th>X19</th>\n",
       "      <th>X20</th>\n",
       "      <th>X23</th>\n",
       "      <th>X30</th>\n",
       "      <th>X32</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">modeling</th>\n",
       "      <th>0</th>\n",
       "      <td>11.89%</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$19,080</td>\n",
       "      <td>36 months</td>\n",
       "      <td>B</td>\n",
       "      <td>B4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>RENT</td>\n",
       "      <td>VERIFIED - income</td>\n",
       "      <td>Aug-09</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation for on-time payer</td>\n",
       "      <td>941xx</td>\n",
       "      <td>CA</td>\n",
       "      <td>Feb-94</td>\n",
       "      <td>52.10%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.71%</td>\n",
       "      <td>$7,000</td>\n",
       "      <td>$7,000</td>\n",
       "      <td>$673</td>\n",
       "      <td>36 months</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>CNN</td>\n",
       "      <td>&lt; 1 year</td>\n",
       "      <td>RENT</td>\n",
       "      <td>not verified</td>\n",
       "      <td>May-08</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>Credit Card payoff</td>\n",
       "      <td>112xx</td>\n",
       "      <td>NY</td>\n",
       "      <td>Oct-00</td>\n",
       "      <td>76.70%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.99%</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$25,000</td>\n",
       "      <td>$24,725</td>\n",
       "      <td>36 months</td>\n",
       "      <td>D</td>\n",
       "      <td>D3</td>\n",
       "      <td>Web Programmer</td>\n",
       "      <td>1 year</td>\n",
       "      <td>RENT</td>\n",
       "      <td>VERIFIED - income</td>\n",
       "      <td>Aug-14</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>mlue</td>\n",
       "      <td>100xx</td>\n",
       "      <td>NY</td>\n",
       "      <td>Jun-00</td>\n",
       "      <td>66.30%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.11%</td>\n",
       "      <td>$1,200</td>\n",
       "      <td>$1,200</td>\n",
       "      <td>$1,200</td>\n",
       "      <td>36 months</td>\n",
       "      <td>C</td>\n",
       "      <td>C2</td>\n",
       "      <td>city of beaumont texas</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>OWN</td>\n",
       "      <td>not verified</td>\n",
       "      <td>Mar-10</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>zxcvb</td>\n",
       "      <td>777xx</td>\n",
       "      <td>TX</td>\n",
       "      <td>Jan-85</td>\n",
       "      <td>40.40%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.57%</td>\n",
       "      <td>$10,800</td>\n",
       "      <td>$10,800</td>\n",
       "      <td>$10,692</td>\n",
       "      <td>36 months</td>\n",
       "      <td>C</td>\n",
       "      <td>C3</td>\n",
       "      <td>State Farm Insurance</td>\n",
       "      <td>6 years</td>\n",
       "      <td>RENT</td>\n",
       "      <td>not verified</td>\n",
       "      <td>Nov-09</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Nicolechr1978</td>\n",
       "      <td>067xx</td>\n",
       "      <td>CT</td>\n",
       "      <td>Dec-96</td>\n",
       "      <td>25.60%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">testing</th>\n",
       "      <th>79995</th>\n",
       "      <td>NaN</td>\n",
       "      <td>$6,400</td>\n",
       "      <td>$6,400</td>\n",
       "      <td>$6,400</td>\n",
       "      <td>36 months</td>\n",
       "      <td>A</td>\n",
       "      <td>A2</td>\n",
       "      <td>Supervisor</td>\n",
       "      <td>8 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>not verified</td>\n",
       "      <td>15-Jan</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>Credit card refinancing</td>\n",
       "      <td>922xx</td>\n",
       "      <td>CA</td>\n",
       "      <td>6-Apr</td>\n",
       "      <td>47.90%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79996</th>\n",
       "      <td>NaN</td>\n",
       "      <td>$30,000</td>\n",
       "      <td>$30,000</td>\n",
       "      <td>$30,000</td>\n",
       "      <td>60 months</td>\n",
       "      <td>E</td>\n",
       "      <td>E2</td>\n",
       "      <td>Manager</td>\n",
       "      <td>8 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>VERIFIED - income</td>\n",
       "      <td>15-Jan</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>Credit card refinancing</td>\n",
       "      <td>535xx</td>\n",
       "      <td>WI</td>\n",
       "      <td>Aug-96</td>\n",
       "      <td>51.30%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79997</th>\n",
       "      <td>NaN</td>\n",
       "      <td>$17,600</td>\n",
       "      <td>$17,600</td>\n",
       "      <td>$17,600</td>\n",
       "      <td>36 months</td>\n",
       "      <td>D</td>\n",
       "      <td>D4</td>\n",
       "      <td>Field Unit Supervisor</td>\n",
       "      <td>2 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>not verified</td>\n",
       "      <td>15-Jan</td>\n",
       "      <td>credit_card</td>\n",
       "      <td>Credit card refinancing</td>\n",
       "      <td>853xx</td>\n",
       "      <td>AZ</td>\n",
       "      <td>4-Dec</td>\n",
       "      <td>37.10%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79998</th>\n",
       "      <td>NaN</td>\n",
       "      <td>$2,500</td>\n",
       "      <td>$2,500</td>\n",
       "      <td>$2,500</td>\n",
       "      <td>36 months</td>\n",
       "      <td>C</td>\n",
       "      <td>C2</td>\n",
       "      <td>Senior Project Manager</td>\n",
       "      <td>10+ years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>not verified</td>\n",
       "      <td>15-Jan</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation</td>\n",
       "      <td>208xx</td>\n",
       "      <td>MD</td>\n",
       "      <td>Jun-99</td>\n",
       "      <td>76.70%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79999</th>\n",
       "      <td>NaN</td>\n",
       "      <td>$11,800</td>\n",
       "      <td>$11,800</td>\n",
       "      <td>$11,800</td>\n",
       "      <td>36 months</td>\n",
       "      <td>B</td>\n",
       "      <td>B5</td>\n",
       "      <td>Accountant</td>\n",
       "      <td>4 years</td>\n",
       "      <td>MORTGAGE</td>\n",
       "      <td>not verified</td>\n",
       "      <td>15-Jan</td>\n",
       "      <td>debt_consolidation</td>\n",
       "      <td>Debt consolidation</td>\n",
       "      <td>670xx</td>\n",
       "      <td>KS</td>\n",
       "      <td>5-Dec</td>\n",
       "      <td>93.70%</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>418749 rows × 19 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    X1       X4       X5       X6          X7 X8  X9  \\\n",
       "modeling 0      11.89%  $25,000  $25,000  $19,080   36 months  B  B4   \n",
       "         1      10.71%   $7,000   $7,000     $673   36 months  B  B5   \n",
       "         2      16.99%  $25,000  $25,000  $24,725   36 months  D  D3   \n",
       "         3      13.11%   $1,200   $1,200   $1,200   36 months  C  C2   \n",
       "         4      13.57%  $10,800  $10,800  $10,692   36 months  C  C3   \n",
       "...                ...      ...      ...      ...         ... ..  ..   \n",
       "testing  79995     NaN   $6,400   $6,400   $6,400   36 months  A  A2   \n",
       "         79996     NaN  $30,000  $30,000  $30,000   60 months  E  E2   \n",
       "         79997     NaN  $17,600  $17,600  $17,600   36 months  D  D4   \n",
       "         79998     NaN   $2,500   $2,500   $2,500   36 months  C  C2   \n",
       "         79999     NaN  $11,800  $11,800  $11,800   36 months  B  B5   \n",
       "\n",
       "                                    X10        X11       X12  \\\n",
       "modeling 0                          NaN   < 1 year      RENT   \n",
       "         1                          CNN   < 1 year      RENT   \n",
       "         2               Web Programmer     1 year      RENT   \n",
       "         3       city of beaumont texas  10+ years       OWN   \n",
       "         4         State Farm Insurance    6 years      RENT   \n",
       "...                                 ...        ...       ...   \n",
       "testing  79995               Supervisor    8 years  MORTGAGE   \n",
       "         79996                  Manager    8 years  MORTGAGE   \n",
       "         79997    Field Unit Supervisor    2 years  MORTGAGE   \n",
       "         79998  Senior Project Manager   10+ years  MORTGAGE   \n",
       "         79999               Accountant    4 years  MORTGAGE   \n",
       "\n",
       "                              X14     X15                 X17  \\\n",
       "modeling 0      VERIFIED - income  Aug-09  debt_consolidation   \n",
       "         1           not verified  May-08         credit_card   \n",
       "         2      VERIFIED - income  Aug-14  debt_consolidation   \n",
       "         3           not verified  Mar-10  debt_consolidation   \n",
       "         4           not verified  Nov-09  debt_consolidation   \n",
       "...                           ...     ...                 ...   \n",
       "testing  79995       not verified  15-Jan         credit_card   \n",
       "         79996  VERIFIED - income  15-Jan         credit_card   \n",
       "         79997       not verified  15-Jan         credit_card   \n",
       "         79998       not verified  15-Jan  debt_consolidation   \n",
       "         79999       not verified  15-Jan  debt_consolidation   \n",
       "\n",
       "                                                 X18    X19 X20     X23  \\\n",
       "modeling 0      Debt consolidation for on-time payer  941xx  CA  Feb-94   \n",
       "         1                        Credit Card payoff  112xx  NY  Oct-00   \n",
       "         2                                      mlue  100xx  NY  Jun-00   \n",
       "         3                                     zxcvb  777xx  TX  Jan-85   \n",
       "         4                             Nicolechr1978  067xx  CT  Dec-96   \n",
       "...                                              ...    ...  ..     ...   \n",
       "testing  79995               Credit card refinancing  922xx  CA   6-Apr   \n",
       "         79996               Credit card refinancing  535xx  WI  Aug-96   \n",
       "         79997               Credit card refinancing  853xx  AZ   4-Dec   \n",
       "         79998                    Debt consolidation  208xx  MD  Jun-99   \n",
       "         79999                    Debt consolidation  670xx  KS   5-Dec   \n",
       "\n",
       "                   X30 X32  \n",
       "modeling 0      52.10%   f  \n",
       "         1      76.70%   f  \n",
       "         2      66.30%   f  \n",
       "         3      40.40%   f  \n",
       "         4      25.60%   f  \n",
       "...                ...  ..  \n",
       "testing  79995  47.90%   f  \n",
       "         79996  51.30%   f  \n",
       "         79997  37.10%   f  \n",
       "         79998  76.70%   f  \n",
       "         79999  93.70%   f  \n",
       "\n",
       "[418749 rows x 19 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[:,df.dtypes == np.object]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Date Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "from datetime import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "def date_format(x):\n",
    "    for fmt in ('%d-%b', '%b-%y', '%Y-%m-%d'):\n",
    "        try:\n",
    "            return datetime.strptime(x, fmt)\n",
    "        except ValueError:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Clean the data format for date columns\n",
    "df['X15'] = df['X15'].astype(str).apply(lambda x: date_format(x))\n",
    "df['X23'] = df['X23'].astype(str).apply(lambda x: date_format(x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Only leave the year as the integer type\n",
    "df.X15 = df['X15'].dt.strftime('%Y').astype(int)\n",
    "df.X23 = df['X23'].dt.strftime('%Y').astype(int)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Money Value Format & Zip Code Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Replace the '$ for money value column\n",
    "df = df.replace(r'[$]','', regex = True)\n",
    "\n",
    "# Remove the ',' for the money value column\n",
    "df = df.replace(',','',regex = True)\n",
    "\n",
    "# Remove the 'xx' for the Zip code column\n",
    "df = df.replace('xx','',regex = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Convert the money value colmn and Zip code column to integer type\n",
    "df.X4 = df.X4.astype('int64')\n",
    "df.X5 = df.X5.astype('int64')\n",
    "df.X6 = df.X6.astype('int64')\n",
    "df.X19 = df.X19.astype('int64')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### % Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Conver the % format to float\n",
    "df.X1 = df.X1.apply(lambda x: float(str(x).strip('%')))\n",
    "df.X30 = df.X30.apply(lambda x: float(str(x).strip('%')))\n",
    "\n",
    "## Remove the 'months'\n",
    "df.X7 = df.X7.apply(lambda x: int(str(x).strip('months')))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Year Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.X11 = df.X11.replace('[< ]','', regex = True)\n",
    "df.X11 = df.X11.replace('[+]','', regex = True)\n",
    "df.X11 = df.X11.replace('[year]','', regex = True)\n",
    "df.X11 = df.X11.replace('[s]','', regex = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\n",
    "df[['X11']] = imputer.fit_transform(df[['X11']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.X11 = df.X11.astype('int64')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Categorical Data Format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.X7 = df.X7.astype('category')\n",
    "df.X8 = df.X8.astype('category')\n",
    "df.X9 = df.X9.astype('category')\n",
    "df.X10 = df.X10.astype('category')\n",
    "df.X12 = df.X12.astype('category')\n",
    "df.X14 = df.X14.astype('category')\n",
    "df.X17 = df.X17.astype('category')\n",
    "df.X18 = df.X18.astype('category')\n",
    "df.X20 = df.X20.astype('category')\n",
    "df.X32 = df.X32.astype('category')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Check the Data Type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X1      float64\n",
       "X4        int64\n",
       "X5        int64\n",
       "X6        int64\n",
       "X7     category\n",
       "X8     category\n",
       "X9     category\n",
       "X10    category\n",
       "X11       int64\n",
       "X12    category\n",
       "X13     float64\n",
       "X14    category\n",
       "X15       int64\n",
       "X17    category\n",
       "X18    category\n",
       "X19       int64\n",
       "X20    category\n",
       "X21     float64\n",
       "X22     float64\n",
       "X23       int64\n",
       "X24     float64\n",
       "X25     float64\n",
       "X26     float64\n",
       "X27     float64\n",
       "X28     float64\n",
       "X29     float64\n",
       "X30     float64\n",
       "X31     float64\n",
       "X32    category\n",
       "dtype: object"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(df.dtypes == np.object).any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Now the all the data types are clean\n"
     ]
    }
   ],
   "source": [
    "print('Now the all the data types are clean')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3 Convert Categorical Data to Numerical"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X7     category\n",
       "X8     category\n",
       "X9     category\n",
       "X10    category\n",
       "X12    category\n",
       "X14    category\n",
       "X17    category\n",
       "X18    category\n",
       "X20    category\n",
       "X32    category\n",
       "dtype: object"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes[df.dtypes == 'category']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Columns that can be convert to dummies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I decided to convert X8 into the dummy variables. However, X9 has similar categories so I decided to drop it.\n"
     ]
    }
   ],
   "source": [
    "print('I decided to convert X8 into the dummy variables. However, X9 has similar categories so I decided to drop it.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([df, pd.get_dummies(df.X8, prefix='X8')], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I convert all the other columns to be dummy variables, too.\n"
     ]
    }
   ],
   "source": [
    "print('I convert all the other columns to be dummy variables, too.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.concat([df, pd.get_dummies(df.X7, prefix='X7')], axis=1)\n",
    "df = pd.concat([df, pd.get_dummies(df.X12, prefix='X12')], axis=1)\n",
    "df = pd.concat([df, pd.get_dummies(df.X14, prefix='X14')], axis=1)\n",
    "df = pd.concat([df, pd.get_dummies(df.X17, prefix='X17')], axis=1)\n",
    "df = pd.concat([df, pd.get_dummies(df.X20, prefix='X20')], axis=1)\n",
    "df = pd.concat([df, pd.get_dummies(df.X32, prefix='X32')], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Variables that are not suitable for dummy variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Both X10 and X18 has so many categories, so it is hard for me to conver them into variables. I decided to drop these two columns.\n"
     ]
    }
   ],
   "source": [
    "print('Both X10 and X18 has so many categories, so it is hard for me to conver them into variables. I decided to drop these two columns.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Teacher                      5158\n",
       "Manager                      4150\n",
       "Registered Nurse             2102\n",
       "RN                           2046\n",
       "Supervisor                   1853\n",
       "                             ... \n",
       "Route Trainer                   1\n",
       "Route Support                   1\n",
       "Route Supervisor/Owner          1\n",
       "Route Supervisor                1\n",
       "    MOTHER  THERESA  HOME       1\n",
       "Name: X10, Length: 183661, dtype: int64"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.X10.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Debt consolidation                          155507\n",
       "Credit card refinancing                      59175\n",
       "Home improvement                             13782\n",
       "Debt Consolidation                           13267\n",
       "Other                                        11560\n",
       "                                             ...  \n",
       "lower monthly payments and interest cost         1\n",
       "PAYOFDEBT                                        1\n",
       "PAYMYDEBT                                        1\n",
       "PAYMENT OF CREDIT CARDS                          1\n",
       "îîMY FIRST CAR îî                        1\n",
       "Name: X18, Length: 53532, dtype: int64"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.X18.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Drop all the categorical columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.drop(['X7','X8','X9','X10','X12','X14','X17','X18','X20','X32'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>X11</th>\n",
       "      <th>X13</th>\n",
       "      <th>X15</th>\n",
       "      <th>X19</th>\n",
       "      <th>X21</th>\n",
       "      <th>X22</th>\n",
       "      <th>...</th>\n",
       "      <th>X20_TX</th>\n",
       "      <th>X20_UT</th>\n",
       "      <th>X20_VA</th>\n",
       "      <th>X20_VT</th>\n",
       "      <th>X20_WA</th>\n",
       "      <th>X20_WI</th>\n",
       "      <th>X20_WV</th>\n",
       "      <th>X20_WY</th>\n",
       "      <th>X32_f</th>\n",
       "      <th>X32_w</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">modeling</th>\n",
       "      <th>0</th>\n",
       "      <td>11.89</td>\n",
       "      <td>25000</td>\n",
       "      <td>25000</td>\n",
       "      <td>19080</td>\n",
       "      <td>1</td>\n",
       "      <td>85000.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>941</td>\n",
       "      <td>19.48</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10.71</td>\n",
       "      <td>7000</td>\n",
       "      <td>7000</td>\n",
       "      <td>673</td>\n",
       "      <td>1</td>\n",
       "      <td>65000.0</td>\n",
       "      <td>2008</td>\n",
       "      <td>112</td>\n",
       "      <td>14.29</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.99</td>\n",
       "      <td>25000</td>\n",
       "      <td>25000</td>\n",
       "      <td>24725</td>\n",
       "      <td>1</td>\n",
       "      <td>70000.0</td>\n",
       "      <td>2014</td>\n",
       "      <td>100</td>\n",
       "      <td>10.50</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.11</td>\n",
       "      <td>1200</td>\n",
       "      <td>1200</td>\n",
       "      <td>1200</td>\n",
       "      <td>10</td>\n",
       "      <td>54000.0</td>\n",
       "      <td>2010</td>\n",
       "      <td>777</td>\n",
       "      <td>5.47</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>13.57</td>\n",
       "      <td>10800</td>\n",
       "      <td>10800</td>\n",
       "      <td>10692</td>\n",
       "      <td>6</td>\n",
       "      <td>32000.0</td>\n",
       "      <td>2009</td>\n",
       "      <td>67</td>\n",
       "      <td>11.63</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 103 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               X1     X4     X5     X6  X11      X13   X15  X19    X21  X22  \\\n",
       "modeling 0  11.89  25000  25000  19080    1  85000.0  2009  941  19.48  0.0   \n",
       "         1  10.71   7000   7000    673    1  65000.0  2008  112  14.29  0.0   \n",
       "         2  16.99  25000  25000  24725    1  70000.0  2014  100  10.50  0.0   \n",
       "         3  13.11   1200   1200   1200   10  54000.0  2010  777   5.47  0.0   \n",
       "         4  13.57  10800  10800  10692    6  32000.0  2009   67  11.63  0.0   \n",
       "\n",
       "            ...  X20_TX  X20_UT  X20_VA  X20_VT  X20_WA  X20_WI  X20_WV  \\\n",
       "modeling 0  ...       0       0       0       0       0       0       0   \n",
       "         1  ...       0       0       0       0       0       0       0   \n",
       "         2  ...       0       0       0       0       0       0       0   \n",
       "         3  ...       1       0       0       0       0       0       0   \n",
       "         4  ...       0       0       0       0       0       0       0   \n",
       "\n",
       "            X20_WY  X32_f  X32_w  \n",
       "modeling 0       0      1      0  \n",
       "         1       0      1      0  \n",
       "         2       0      1      0  \n",
       "         3       0      1      0  \n",
       "         4       0      1      0  \n",
       "\n",
       "[5 rows x 103 columns]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.4 Come Back to the Missing Values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X1      80000\n",
       "X13     51715\n",
       "X25    224039\n",
       "X26    361520\n",
       "X30        30\n",
       "dtype: int64"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = df.isnull().sum()\n",
    "mask[mask>0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputer = SimpleImputer(missing_values = np.nan, strategy = 'mean')\n",
    "df[['X13']] = imputer.fit_transform(df[['X13']])\n",
    "df['X25'] = df['X25'].fillna(-1)\n",
    "df['X26'] = df['X26'].fillna(-1)\n",
    "df[['X30']] = imputer.fit_transform(df[['X30']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I fill X25 and X26 with -1 for NaN values becuase they do not have the record.\n"
     ]
    }
   ],
   "source": [
    "print('I fill X25 and X26 with -1 for NaN values becuase they do not have the record.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X1        float64\n",
       "X4          int64\n",
       "X5          int64\n",
       "X6          int64\n",
       "X11         int64\n",
       "           ...   \n",
       "X20_WI      uint8\n",
       "X20_WV      uint8\n",
       "X20_WY      uint8\n",
       "X32_f       uint8\n",
       "X32_w       uint8\n",
       "Length: 103, dtype: object"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "X1    80000\n",
       "dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mask = df.isnull().sum()\n",
    "mask[mask>0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.5. PCA Dimension Reduction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.decomposition import PCA\n",
    "from sklearn.preprocessing import StandardScaler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.iloc[:,1:]\n",
    "y = df['X1']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "stscaler = StandardScaler().fit(x)\n",
    "xs = stscaler.transform(x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7fb3c1829d10>]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pca_model = PCA().fit(xs)\n",
    "plt.plot(pca_model.explained_variance_ratio_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5374143770471586"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pca_model.explained_variance_ratio_.cumsum()[40]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### At first, I want to use PCA to reduce the dimensions. However, I find out that PCA did not perform so well in capturing the information in this case. Later on, I ran the model without any dimension reduction and the accuracy scores look fine, so I decided to not use PCA."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.6 Sperate Modeling Dataset and Testing Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = df.loc['testing']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.loc['modeling']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing Dataset: (80000, 103)\n",
      "Modeing Dataset: (338749, 103)\n"
     ]
    }
   ],
   "source": [
    "print('Testing Dataset:',data.shape)\n",
    "print('Modeing Dataset:',df.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Build the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1 Create Training and Testing Datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "270999 items in training data, 67750 in test data\n"
     ]
    }
   ],
   "source": [
    "train, test = train_test_split(df, test_size=0.2, random_state = 1)\n",
    "print(\"%d items in training data, %d in test data\" % (len(train), len(test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_x = train.iloc[:,1:]\n",
    "test_x = test.iloc[:,1:]\n",
    "train_y = train['X1']\n",
    "test_y = test['X1']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Linear Regression Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error as MSE\n",
    "from sklearn.model_selection import cross_val_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_model = LinearRegression().fit(train_x,train_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Coefficient of Determination & Train RMSE & CV RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coefficient of determination: 0.8134\n"
     ]
    }
   ],
   "source": [
    "r_sq_linear = linear_model.score(train_x,train_y)\n",
    "print('coefficient of determination:', round(r_sq_linear,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_y_linear = linear_model.predict(train_x)\n",
    "RMSE_linear = (MSE(train_y,train_y_linear))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train RMSE for the linear model: 1.8916\n"
     ]
    }
   ],
   "source": [
    "print('Train RMSE for the linear model:', round(RMSE_linear,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "MSE_CV_Linear = - cross_val_score(linear_model, train_x, train_y, cv=10, \n",
    "                                  scoring = 'neg_mean_squared_error', n_jobs=-1)\n",
    "RMSE_CV_Linear = (MSE_CV_Linear.mean())**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV RMSE for the linear model: 1.8924\n"
     ]
    }
   ],
   "source": [
    "print('CV RMSE for the linear model:', round(RMSE_CV_Linear,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [],
   "source": [
    "linear_y_pred = linear_model.predict(test_x)\n",
    "RMSE_linear_test = (MSE(test_y,linear_y_pred))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test RMSE for the linear model: 1.9024\n"
     ]
    }
   ],
   "source": [
    "print('Test RMSE for the linear model:', round(RMSE_linear_test,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.3 Decision Tree Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree = DecisionTreeRegressor().fit(train_x,train_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Coefficient of Determination & Train RMSE & CV RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coefficient of determination: 1.0\n"
     ]
    }
   ],
   "source": [
    "r_sq_tree = tree.score(train_x,train_y)\n",
    "print('coefficient of determination:', round(r_sq_tree,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_y_tree = tree.predict(train_x)\n",
    "RMSE_tree = (MSE(train_y,train_y_tree))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train RMSE for the Decision Tree model: 0.0\n"
     ]
    }
   ],
   "source": [
    "print('Train RMSE for the Decision Tree model:', round(RMSE_tree,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "MSE_CV_tree = - cross_val_score(tree, train_x, train_y, cv=10, \n",
    "                                  scoring = 'neg_mean_squared_error', n_jobs=-1)\n",
    "RMSE_CV_tree = (MSE_CV_tree.mean())**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV RMSE for the Decision Tree model: 2.0984\n"
     ]
    }
   ],
   "source": [
    "print('CV RMSE for the Decision Tree model:', round(RMSE_CV_tree,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "tree_y_pred = tree.predict(test_x)\n",
    "RMSE_tree_test = (MSE(test_y,tree_y_pred))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test RMSE for the Decision Tree model: 2.1043\n"
     ]
    }
   ],
   "source": [
    "print('Test RMSE for the Decision Tree model:', round(RMSE_tree_test,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2 Random Forest Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": [
    "rf = RandomForestRegressor(max_depth=50, min_samples_leaf = 0.01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(bootstrap=True, ccp_alpha=0.0, criterion='mse',\n",
       "                      max_depth=50, max_features='auto', max_leaf_nodes=None,\n",
       "                      max_samples=None, min_impurity_decrease=0.0,\n",
       "                      min_impurity_split=None, min_samples_leaf=0.01,\n",
       "                      min_samples_split=2, min_weight_fraction_leaf=0.0,\n",
       "                      n_estimators=100, n_jobs=None, oob_score=False,\n",
       "                      random_state=None, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rf.fit(train_x,train_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Coefficient of Determination & Train RMSE & CV RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coefficient of determination: 0.8203\n"
     ]
    }
   ],
   "source": [
    "r_sq_rf = rf.score(train_x,train_y)\n",
    "print('coefficient of determination:', round(r_sq_rf,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_y_rf = rf.predict(train_x)\n",
    "RMSE_rf = (MSE(train_y,train_y_rf))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train RMSE for the Random Forest model: 1.8562\n"
     ]
    }
   ],
   "source": [
    "print('Train RMSE for the Random Forest model:', round(RMSE_rf,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "MSE_CV_rf = - cross_val_score(rf, train_x, train_y, cv=5, scoring = 'neg_mean_squared_error', n_jobs=-1)\n",
    "RMSE_CV_rf = (MSE_CV_rf.mean())**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV RMSE for the Random Forest model: 1.8595\n"
     ]
    }
   ],
   "source": [
    "print('CV RMSE for the Random Forest model:', round(RMSE_CV_rf,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_y_rf = rf.predict(test_x)\n",
    "RMSE_rf_test = (MSE(test_y,test_y_rf))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test RMSE for the Random Forest model: 1.8577\n"
     ]
    }
   ],
   "source": [
    "print('Test RMSE for the Random Forest model:', round(RMSE_rf_test,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.6 Gradient Boosting Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import GradientBoostingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [],
   "source": [
    "boosting = GradientBoostingRegressor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GradientBoostingRegressor(alpha=0.9, ccp_alpha=0.0, criterion='friedman_mse',\n",
       "                          init=None, learning_rate=0.1, loss='ls', max_depth=3,\n",
       "                          max_features=None, max_leaf_nodes=None,\n",
       "                          min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                          min_samples_leaf=1, min_samples_split=2,\n",
       "                          min_weight_fraction_leaf=0.0, n_estimators=100,\n",
       "                          n_iter_no_change=None, presort='deprecated',\n",
       "                          random_state=None, subsample=1.0, tol=0.0001,\n",
       "                          validation_fraction=0.1, verbose=0, warm_start=False)"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boosting.fit(train_x,train_y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Coefficient of Determination & Train RMSE & CV RMSE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coefficient of determination: 0.8453\n"
     ]
    }
   ],
   "source": [
    "r_sq_boosting = boosting.score(train_x,train_y)\n",
    "print('coefficient of determination:', round(r_sq_boosting,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_y_boosting = boosting.predict(train_x)\n",
    "RMSE_boosting = (MSE(train_y,train_y_boosting))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train RMSE for the Gradient Boosting model: 1.7226\n"
     ]
    }
   ],
   "source": [
    "print('Train RMSE for the Gradient Boosting model:', round(RMSE_boosting,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [],
   "source": [
    "MSE_CV_boosting = - cross_val_score(boosting, train_x, train_y, cv=5, scoring = 'neg_mean_squared_error', n_jobs=-1)\n",
    "RMSE_CV_boosting  = (MSE_CV_boosting .mean())**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV RMSE for the Gradient Boosting model: 1.7251\n"
     ]
    }
   ],
   "source": [
    "print('CV RMSE for the Gradient Boosting model:', round(RMSE_CV_boosting,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Test Dateset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "test_y_boosting = boosting.predict(test_x)\n",
    "RMSE_boosting_test = (MSE(test_y,test_y_boosting))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test RMSE for the Gradient Boosting model: 1.7381\n"
     ]
    }
   ],
   "source": [
    "print('Test RMSE for the Gradient Boosting model:', round(RMSE_boosting_test,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.5 Voting Regressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import VotingRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "linear = LinearRegression()\n",
    "tree = DecisionTreeRegressor()\n",
    "random = RandomForestRegressor(max_depth=50, min_samples_leaf = 0.01)\n",
    "boosting = GradientBoostingRegressor()\n",
    "\n",
    "regressors = [('Linear Regression', linear),('Decision Tree', tree),\n",
    "              ('Random Forest',random),('Gradient Boosting', boosting)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression : 1.902\n",
      "Decision Tree : 2.108\n",
      "Random Forest : 1.856\n",
      "Gradient Boosting : 1.738\n"
     ]
    }
   ],
   "source": [
    "for name, model in regressors:\n",
    "    model.fit(train_x,train_y)\n",
    "    y_pred = model.predict(test_x)\n",
    "    print('{:s} : {:.3f}'.format(name,MSE(test_y, y_pred)**0.5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [],
   "source": [
    "vr = VotingRegressor(estimators = regressors)\n",
    "vr.fit(train_x,train_y)\n",
    "vr_y_pred = vr.predict(test_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([11.10071755, 14.51615254,  8.28364221, ...,  8.07610114,\n",
       "        7.92409732, 10.73003751])"
      ]
     },
     "execution_count": 104,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vr_y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coefficient of determination: 0.912\n"
     ]
    }
   ],
   "source": [
    "r_sq_br = vr.score(train_x,train_y)\n",
    "print('coefficient of determination:', round(r_sq_br,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_y_vr = vr.predict(train_x)\n",
    "RMSE_vr = (MSE(train_y,train_y_vr))**(1/2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train RMSE for the Voting Regressor model: 1.2989\n"
     ]
    }
   ],
   "source": [
    "print('Train RMSE for the Voting Regressor model:', round(RMSE_vr,4))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test RMSE for the Voting Regressor model: 1.6683\n"
     ]
    }
   ],
   "source": [
    "RMSE_vr_test = MSE(test_y,vr_y_pred)**0.5\n",
    "print('Test RMSE for the Voting Regressor model:', round(RMSE_vr_test,4))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.5 Model Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### According to the RMSE from the linear regression, decision tree, random forest, gradient boosting, and voting regressor, voting regressor has the lowest RMSE, so I will choose voting regressor to apply to my testing dataset below. \n",
    "#### I also used cross validation for linear regression, decision tree, random forest, and gradient boosting models to check the CV errors, and compare them with RMSE to make sure the model is not overfitting or underfitting. Overall, all three models perform well with very minor CV error and RMSE differences. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Apply the Model to the Testing Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>X6</th>\n",
       "      <th>X11</th>\n",
       "      <th>X13</th>\n",
       "      <th>X15</th>\n",
       "      <th>X19</th>\n",
       "      <th>X21</th>\n",
       "      <th>X22</th>\n",
       "      <th>...</th>\n",
       "      <th>X20_TX</th>\n",
       "      <th>X20_UT</th>\n",
       "      <th>X20_VA</th>\n",
       "      <th>X20_VT</th>\n",
       "      <th>X20_WA</th>\n",
       "      <th>X20_WI</th>\n",
       "      <th>X20_WV</th>\n",
       "      <th>X20_WY</th>\n",
       "      <th>X32_f</th>\n",
       "      <th>X32_w</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>6000</td>\n",
       "      <td>6000</td>\n",
       "      <td>6000</td>\n",
       "      <td>10</td>\n",
       "      <td>68000.0</td>\n",
       "      <td>1900</td>\n",
       "      <td>430</td>\n",
       "      <td>28.31</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24000</td>\n",
       "      <td>24000</td>\n",
       "      <td>24000</td>\n",
       "      <td>8</td>\n",
       "      <td>110480.0</td>\n",
       "      <td>1900</td>\n",
       "      <td>945</td>\n",
       "      <td>16.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>35000</td>\n",
       "      <td>35000</td>\n",
       "      <td>35000</td>\n",
       "      <td>10</td>\n",
       "      <td>86000.0</td>\n",
       "      <td>1900</td>\n",
       "      <td>195</td>\n",
       "      <td>32.49</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>10000</td>\n",
       "      <td>10000</td>\n",
       "      <td>10000</td>\n",
       "      <td>10</td>\n",
       "      <td>30000.0</td>\n",
       "      <td>1900</td>\n",
       "      <td>921</td>\n",
       "      <td>32.96</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24000</td>\n",
       "      <td>24000</td>\n",
       "      <td>24000</td>\n",
       "      <td>10</td>\n",
       "      <td>82500.0</td>\n",
       "      <td>1900</td>\n",
       "      <td>196</td>\n",
       "      <td>31.03</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 103 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   X1     X4     X5     X6  X11       X13   X15  X19    X21  X22  ...  X20_TX  \\\n",
       "0 NaN   6000   6000   6000   10   68000.0  1900  430  28.31  0.0  ...       0   \n",
       "1 NaN  24000  24000  24000    8  110480.0  1900  945  16.03  0.0  ...       0   \n",
       "2 NaN  35000  35000  35000   10   86000.0  1900  195  32.49  0.0  ...       0   \n",
       "3 NaN  10000  10000  10000   10   30000.0  1900  921  32.96  0.0  ...       0   \n",
       "4 NaN  24000  24000  24000   10   82500.0  1900  196  31.03  0.0  ...       0   \n",
       "\n",
       "   X20_UT  X20_VA  X20_VT  X20_WA  X20_WI  X20_WV  X20_WY  X32_f  X32_w  \n",
       "0       0       0       0       0       0       0       0      1      0  \n",
       "1       0       0       0       0       0       0       0      0      1  \n",
       "2       0       0       0       0       0       0       0      0      1  \n",
       "3       0       0       0       0       0       0       0      0      1  \n",
       "4       0       0       0       0       0       0       0      0      1  \n",
       "\n",
       "[5 rows x 103 columns]"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(80000, 103)"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.drop(['X1'],axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.1 Apply Voting Regressor Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [],
   "source": [
    "vr_final_test = vr.predict(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = pd.DataFrame(vr_final_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.2 Save the Result as CSV file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8.859627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>4.148477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9.252308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>11.823189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6.953311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79995</th>\n",
       "      <td>3.163833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79996</th>\n",
       "      <td>14.262353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79997</th>\n",
       "      <td>10.377495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79998</th>\n",
       "      <td>8.866548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>79999</th>\n",
       "      <td>6.353864</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>80000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               0\n",
       "0       8.859627\n",
       "1       4.148477\n",
       "2       9.252308\n",
       "3      11.823189\n",
       "4       6.953311\n",
       "...          ...\n",
       "79995   3.163833\n",
       "79996  14.262353\n",
       "79997  10.377495\n",
       "79998   8.866548\n",
       "79999   6.353864\n",
       "\n",
       "[80000 rows x 1 columns]"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "result.to_csv('result_from_12281155.csv', index = False, header=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4.3 Final Conclusion"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### For this loan prediction task, I used 5 models: linear regression, decision tree, random forest, gradient boosting, and voting regressor. \n",
    "#### Linear Regression: 1.89 training error, 1.89 CV error, 1.90 testing error.\n",
    "#### Decision Tree: 0 training error, 2.01 CV error, 2.10 testing error.\n",
    "#### Random Forest: 1.86 training error, 1.86 CV error, 1.86 testing error\n",
    "#### Gradient Boosting: 1.72 training error, 1.73 CV error, 1.74 testing error\n",
    "#### Voting Regressor: 1.30 training error, 1.67 testing error\n",
    "\n",
    "#### Out of all the three models, Voting Regressor did the best job as its final result is the average of all the four other models. Decision Tree did a good job in the training dataset, but did the worst in the CV and testing, which means decision tree can easily has an overfitting problem. Linear Regression did an ok job as its training error and CV error are similar, and very close to the testing error. This means Linear Regressor does not an overfitting nor underfitting problem. Random Forest and Gradient Boosting did a better than both Linear Regression and Decision Tree as the RMSE are smaller, and they do not have an overfitting nor underfitting problem. \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
